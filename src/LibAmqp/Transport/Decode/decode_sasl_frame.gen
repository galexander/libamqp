/*
   Copyright 2011 StormMQ Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
 
/*
  WARNING: This file was generated by scripts/generate. DO NOT HAND EDIT.
     scripts/generate uses:
  	scripts/generate-amqp-types.rb to generate AMQP typedefs
  	scripts/generate-decode-methods.rb to generate composite type decode methods
 */
/*
    <type name='sasl-mechanisms' provides='sasl-frame' class='composite' source='list'>
      <descriptor name='amqp:sasl-mechanisms:list' code='0x00000000:0x00000040'/>
      <field name='sasl-server-mechanisms' mandatory='true' type='symbol' multiple='true'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_sasl_mechanisms_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_sasl_mechanisms_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_multiple_symbol_cleanup(context, &frame->frames.sasl.mechanisms.sasl_server_mechanisms);
}
int amqp_decode_sasl_mechanisms_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 1;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_sasl_mechanisms;
    frame->cleanup = cleanup_sasl_mechanisms_frame;

    rc = amqp_decode_mandatory_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.mechanisms.sasl_server_mechanisms); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "SASL Mechanisms");
    }

    return rc;  
}   
#endif
/*
    <type name='sasl-init' provides='sasl-frame' class='composite' source='list'>
      <descriptor name='amqp:sasl-init:list' code='0x00000000:0x00000041'/>
      <field name='mechanism' mandatory='true' type='symbol'/>
      <field name='initial-response' type='binary'/>
      <field name='hostname' type='string'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_sasl_init_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_sasl_init_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_symbol_cleanup(context, &frame->frames.sasl.init.mechanism);
    amqp_binary_cleanup(context, &frame->frames.sasl.init.initial_response);
    amqp_string_cleanup(context, &frame->frames.sasl.init.hostname);
}
int amqp_decode_sasl_init_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 3;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_sasl_init;
    frame->cleanup = cleanup_sasl_init_frame;

    rc = amqp_decode_mandatory_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.init.mechanism); field_number++;
    rc = rc && amqp_decode_type_binary(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.init.initial_response); field_number++;
    rc = rc && amqp_decode_type_string(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.init.hostname); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "SASL Init");
    }

    return rc;  
}   
#endif
/*
    <type name='sasl-challenge' provides='sasl-frame' class='composite' source='list'>
      <descriptor name='amqp:sasl-challenge:list' code='0x00000000:0x00000042'/>
      <field name='challenge' mandatory='true' type='binary'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_sasl_challenge_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_sasl_challenge_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_binary_cleanup(context, &frame->frames.sasl.challenge.challenge);
}
int amqp_decode_sasl_challenge_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 1;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_sasl_challenge;
    frame->cleanup = cleanup_sasl_challenge_frame;

    rc = amqp_decode_mandatory_type_binary(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.challenge.challenge); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "SASL Challenge");
    }

    return rc;  
}   
#endif
/*
    <type name='sasl-response' provides='sasl-frame' class='composite' source='list'>
      <descriptor name='amqp:sasl-response:list' code='0x00000000:0x00000043'/>
      <field name='response' mandatory='true' type='binary'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_sasl_response_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_sasl_response_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_binary_cleanup(context, &frame->frames.sasl.response.response);
}
int amqp_decode_sasl_response_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 1;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_sasl_response;
    frame->cleanup = cleanup_sasl_response_frame;

    rc = amqp_decode_mandatory_type_binary(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.response.response); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "SASL Response");
    }

    return rc;  
}   
#endif
/*
    <type name='sasl-outcome' provides='sasl-frame' class='composite' source='list'>
      <descriptor name='amqp:sasl-outcome:list' code='0x00000000:0x00000044'/>
      <field name='code' mandatory='true' type='sasl-code'/>
      <field name='additional-data' type='binary'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_sasl_outcome_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_sasl_outcome_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    // code
    amqp_binary_cleanup(context, &frame->frames.sasl.outcome.additional_data);
}
int amqp_decode_sasl_outcome_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 2;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_sasl_outcome;
    frame->cleanup = cleanup_sasl_outcome_frame;

    rc = amqp_decode_mandatory_primitive_sasl_code(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.outcome.code); field_number++;
    rc = rc && amqp_decode_type_binary(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.sasl.outcome.additional_data); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "SASL Outcome");
    }

    return rc;  
}   
#endif
