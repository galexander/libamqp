/*
   Copyright 2011 StormMQ Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
 
/*
  WARNING: This file was generated by scripts/generate. DO NOT HAND EDIT.
     scripts/generate uses:
  	scripts/generate-amqp-types.rb to generate AMQP typedefs
  	scripts/generate-decode-methods.rb to generate composite type decode methods
 */
/*
    <type name='open' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:open:list' code='0x00000000:0x00000010'/>
      <field name='container-id' mandatory='true' type='string'/>
      <field name='hostname' type='string'/>
      <field name='max-frame-size' default='4294967295' type='uint'/>
      <field name='channel-max' default='65535' type='ushort'/>
      <field name='idle-time-out' type='milliseconds'/>
      <field name='outgoing-locales' type='ietf-language-tag' multiple='true'/>
      <field name='incoming-locales' type='ietf-language-tag' multiple='true'/>
      <field name='offered-capabilities' type='symbol' multiple='true'/>
      <field name='desired-capabilities' type='symbol' multiple='true'/>
      <field name='properties' type='fields'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_open_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_open_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_string_cleanup(context, &frame->frames.amqp.open.container_id);
    amqp_string_cleanup(context, &frame->frames.amqp.open.hostname);
    // max_frame_size
    // channel_max
    // idle_time_out
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.open.outgoing_locales);
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.open.incoming_locales);
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.open.offered_capabilities);
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.open.desired_capabilities);
    amqp_map_cleanup(context, &frame->frames.amqp.open.properties);
}
int amqp_decode_amqp_open_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 10;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_open;
    frame->cleanup = cleanup_amqp_open_frame;

    rc = amqp_decode_mandatory_type_string(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.container_id); field_number++;
    rc = rc && amqp_decode_type_string(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.hostname); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.max_frame_size, 4294967295); field_number++;
    rc = rc && amqp_decode_primitive_ushort(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.channel_max, 65535); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.idle_time_out, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.outgoing_locales); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.incoming_locales); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.offered_capabilities); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.desired_capabilities); field_number++;
    rc = rc && amqp_decode_type_map(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.open.properties); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Open");
    }

    return rc;  
}   
#endif
/*
    <type name='begin' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:begin:list' code='0x00000000:0x00000011'/>
      <field name='remote-channel' type='ushort'/>
      <field name='next-outgoing-id' mandatory='true' type='transfer-number'/>
      <field name='incoming-window' mandatory='true' type='uint'/>
      <field name='outgoing-window' mandatory='true' type='uint'/>
      <field name='handle-max' default='4294967295' type='handle'/>
      <field name='offered-capabilities' type='symbol' multiple='true'/>
      <field name='desired-capabilities' type='symbol' multiple='true'/>
      <field name='properties' type='fields'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_begin_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_begin_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    // remote_channel
    // next_outgoing_id
    // incoming_window
    // outgoing_window
    // handle_max
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.begin.offered_capabilities);
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.begin.desired_capabilities);
    amqp_map_cleanup(context, &frame->frames.amqp.begin.properties);
}
int amqp_decode_amqp_begin_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 8;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_begin;
    frame->cleanup = cleanup_amqp_begin_frame;

    rc = amqp_decode_primitive_ushort(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.remote_channel, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.next_outgoing_id); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.incoming_window); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.outgoing_window); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.handle_max, 4294967295); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.offered_capabilities); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.desired_capabilities); field_number++;
    rc = rc && amqp_decode_type_map(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.begin.properties); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Begin");
    }

    return rc;  
}   
#endif
/*
    <type name='attach' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:attach:list' code='0x00000000:0x00000012'/>
      <field name='name' mandatory='true' type='string'/>
      <field name='handle' mandatory='true' type='handle'/>
      <field name='role' mandatory='true' type='role'/>
      <field name='snd-settle-mode' default='mixed' type='sender-settle-mode'/>
      <field name='rcv-settle-mode' default='first' type='receiver-settle-mode'/>
      <field name='source' requires='source' type='*'/>
      <field name='target' requires='target' type='*'/>
      <field name='unsettled' type='map'/>
      <field name='incomplete-unsettled' default='false' type='boolean'/>
      <field name='initial-delivery-count' type='sequence-no'/>
      <field name='max-message-size' type='ulong'/>
      <field name='offered-capabilities' type='symbol' multiple='true'/>
      <field name='desired-capabilities' type='symbol' multiple='true'/>
      <field name='properties' type='fields'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_attach_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_attach_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_string_cleanup(context, &frame->frames.amqp.attach.name);
    // handle
    // role
    // snd_settle_mode
    // rcv_settle_mode
    amqp_wildcard_cleanup(context, &frame->frames.amqp.attach.source);
    amqp_wildcard_cleanup(context, &frame->frames.amqp.attach.target);
    amqp_map_cleanup(context, &frame->frames.amqp.attach.unsettled);
    // incomplete_unsettled
    // initial_delivery_count
    // max_message_size
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.attach.offered_capabilities);
    amqp_multiple_symbol_cleanup(context, &frame->frames.amqp.attach.desired_capabilities);
    amqp_map_cleanup(context, &frame->frames.amqp.attach.properties);
}
int amqp_decode_amqp_attach_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 14;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_attach;
    frame->cleanup = cleanup_amqp_attach_frame;

    rc = amqp_decode_mandatory_type_string(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.name); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.handle); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.role); field_number++;
    rc = rc && amqp_decode_primitive_sender_settle_mode(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.snd_settle_mode, amqp_sender_settle_mode_mixed); field_number++;
    rc = rc && amqp_decode_primitive_receiver_settle_mode(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.rcv_settle_mode, amqp_receiver_settle_mode_first); field_number++;
    rc = rc && amqp_decode_type_wildcard(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.source); field_number++;
    rc = rc && amqp_decode_type_wildcard(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.target); field_number++;
    rc = rc && amqp_decode_type_map(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.unsettled); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.incomplete_unsettled, false); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.initial_delivery_count, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_ulong(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.max_message_size, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.offered_capabilities); field_number++;
    rc = rc && amqp_decode_multiple_type_symbol(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.desired_capabilities); field_number++;
    rc = rc && amqp_decode_type_map(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.attach.properties); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Attach");
    }

    return rc;  
}   
#endif
/*
    <type name='flow' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:flow:list' code='0x00000000:0x00000013'/>
      <field name='next-incoming-id' type='transfer-number'/>
      <field name='incoming-window' mandatory='true' type='uint'/>
      <field name='next-outgoing-id' mandatory='true' type='transfer-number'/>
      <field name='outgoing-window' mandatory='true' type='uint'/>
      <field name='handle' type='handle'/>
      <field name='delivery-count' type='sequence-no'/>
      <field name='link-credit' type='uint'/>
      <field name='available' type='uint'/>
      <field name='drain' default='false' type='boolean'/>
      <field name='echo' default='false' type='boolean'/>
      <field name='properties' type='fields'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_flow_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_flow_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    // next_incoming_id
    // incoming_window
    // next_outgoing_id
    // outgoing_window
    // handle
    // delivery_count
    // link_credit
    // available
    // drain
    // echo
    amqp_map_cleanup(context, &frame->frames.amqp.flow.properties);
}
int amqp_decode_amqp_flow_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 11;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_flow;
    frame->cleanup = cleanup_amqp_flow_frame;

    rc = amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.next_incoming_id, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.incoming_window); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.next_outgoing_id); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.outgoing_window); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.handle, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.delivery_count, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.link_credit, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.available, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.drain, false); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.echo, false); field_number++;
    rc = rc && amqp_decode_type_map(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.flow.properties); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Flow");
    }

    return rc;  
}   
#endif
/*
    <type name='transfer' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:transfer:list' code='0x00000000:0x00000014'/>
      <field name='handle' mandatory='true' type='handle'/>
      <field name='delivery-id' type='delivery-number'/>
      <field name='delivery-tag' type='delivery-tag'/>
      <field name='message-format' type='message-format'/>
      <field name='settled' type='boolean'/>
      <field name='more' default='false' type='boolean'/>
      <field name='rcv-settle-mode' type='receiver-settle-mode'/>
      <field name='state' requires='delivery-state' type='*'/>
      <field name='resume' default='false' type='boolean'/>
      <field name='aborted' default='false' type='boolean'/>
      <field name='batchable' default='false' type='boolean'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_transfer_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_transfer_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    // handle
    // delivery_id
    amqp_binary_cleanup(context, &frame->frames.amqp.transfer.delivery_tag);
    // message_format
    // settled
    // more
    // rcv_settle_mode
    amqp_wildcard_cleanup(context, &frame->frames.amqp.transfer.state);
    // resume
    // aborted
    // batchable
}
int amqp_decode_amqp_transfer_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 11;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_transfer;
    frame->cleanup = cleanup_amqp_transfer_frame;

    rc = amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.handle); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.delivery_id, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_type_binary(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.delivery_tag); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.message_format, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.settled, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.more, false); field_number++;
    rc = rc && amqp_decode_primitive_receiver_settle_mode(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.rcv_settle_mode, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_type_wildcard(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.state); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.resume, false); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.aborted, false); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.transfer.batchable, false); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Transfer");
    }

    return rc;  
}   
#endif
/*
    <type name='disposition' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:disposition:list' code='0x00000000:0x00000015'/>
      <field name='role' mandatory='true' type='role'/>
      <field name='first' mandatory='true' type='delivery-number'/>
      <field name='last' type='delivery-number'/>
      <field name='settled' default='false' type='boolean'/>
      <field name='state' requires='delivery-state' type='*'/>
      <field name='batchable' default='false' type='boolean'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_disposition_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_disposition_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    // role
    // first
    // last
    // settled
    amqp_wildcard_cleanup(context, &frame->frames.amqp.disposition.state);
    // batchable
}
int amqp_decode_amqp_disposition_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 6;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_disposition;
    frame->cleanup = cleanup_amqp_disposition_frame;

    rc = amqp_decode_mandatory_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.disposition.role); field_number++;
    rc = rc && amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.disposition.first); field_number++;
    rc = rc && amqp_decode_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.disposition.last, AMQP_NO_DEFAULT_VALUE); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.disposition.settled, false); field_number++;
    rc = rc && amqp_decode_type_wildcard(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.disposition.state); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.disposition.batchable, false); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Disposition");
    }

    return rc;  
}   
#endif
/*
    <type name='detach' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:detach:list' code='0x00000000:0x00000016'/>
      <field name='handle' mandatory='true' type='handle'/>
      <field name='closed' default='false' type='boolean'/>
      <field name='error' type='error'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_detach_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_detach_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    // handle
    // closed
    amqp_amqp_error_cleanup(context, &frame->frames.amqp.detach.error);
}
int amqp_decode_amqp_detach_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 3;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_detach;
    frame->cleanup = cleanup_amqp_detach_frame;

    rc = amqp_decode_mandatory_primitive_uint(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.detach.handle); field_number++;
    rc = rc && amqp_decode_primitive_boolean(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.detach.closed, false); field_number++;
    rc = rc && amqp_decode_type_amqp_error(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.detach.error); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Detach");
    }

    return rc;  
}   
#endif
/*
    <type name='end' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:end:list' code='0x00000000:0x00000017'/>
      <field name='error' type='error'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_end_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_end_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_amqp_error_cleanup(context, &frame->frames.amqp.end.error);
}
int amqp_decode_amqp_end_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 1;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_end;
    frame->cleanup = cleanup_amqp_end_frame;

    rc = amqp_decode_type_amqp_error(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.end.error); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP End");
    }

    return rc;  
}   
#endif
/*
    <type name='close' provides='frame' class='composite' source='list'>
      <descriptor name='amqp:close:list' code='0x00000000:0x00000018'/>
      <field name='error' type='error'/>
    </type>
*/ 
#ifdef AMQP_DECODE_GENERATED_HEADER
extern int amqp_decode_amqp_close_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list);
#endif
#ifdef AMQP_DECODE_GENERATED_BODY
static void cleanup_amqp_close_frame(amqp_context_t *context, amqp_frame_t *frame)
{
    amqp_amqp_error_cleanup(context, &frame->frames.amqp.close.error);
}
int amqp_decode_amqp_close_frame(amqp_context_t *context, amqp_buffer_t *buffer, amqp_frame_t *frame, amqp_type_t *field_list)
{
    const int total_fields = 1;
    int field_number = 0;
    int rc;
    
    frame->dispatch = amqp_dispatch_amqp_close;
    frame->cleanup = cleanup_amqp_close_frame;

    rc = amqp_decode_type_amqp_error(context, amqp_field_from_list(field_list, field_number), field_number, total_fields, &frame->frames.amqp.close.error); field_number++;

    assert(field_number = total_fields);
    if (rc == 0)
    {
        amqp_decode_frame_error(context, "AMQP Close");
    }

    return rc;  
}   
#endif
