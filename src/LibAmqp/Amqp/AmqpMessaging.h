/*
   Copyright 2011 StormMQ Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
 
/*
  WARNING: This file was generated by scripts/generate. DO NOT HAND EDIT.
     scripts/generate uses:
  	scripts/generate-amqp-types.rb to generate AMQP typedefs
  	scripts/generate-decode-methods.rb to generate composite type decode methods
 */
#ifndef LIBAMQP_AMQP_AMQP_MESSAGING_H
#define LIBAMQP_AMQP_AMQP_MESSAGING_H
#ifdef __cplusplus
extern "C" {
#endif

#include "AmqpTypes/AmqpTypes.h"
    
typedef struct amqp_addressing_source_t amqp_addressing_source_t;
typedef struct amqp_addressing_target_t amqp_addressing_target_t;
typedef struct amqp_addressing_delete_on_close_t amqp_addressing_delete_on_close_t;
typedef struct amqp_addressing_delete_on_no_links_t amqp_addressing_delete_on_no_links_t;
typedef struct amqp_addressing_delete_on_no_messages_t amqp_addressing_delete_on_no_messages_t;
typedef struct amqp_addressing_delete_on_no_links_or_messages_t amqp_addressing_delete_on_no_links_or_messages_t;
    
/*
    <type name='source' provides='source' class='composite' source='list'>
      <descriptor name='amqp:source:list' code='0x00000000:0x00000028'/>
      <field name='address' requires='address' type='*'/>
      <field name='durable' default='none' type='terminus-durability'/>
      <field name='expiry-policy' default='session-end' type='terminus-expiry-policy'/>
      <field name='timeout' default='0' type='seconds'/>
      <field name='dynamic' default='false' type='boolean'/>
      <field name='dynamic-node-properties' type='node-properties'/>
      <field name='distribution-mode' requires='distribution-mode' type='symbol'/>
      <field name='filter' type='filter-set'/>
      <field name='default-outcome' requires='outcome' type='*'/>
      <field name='outcomes' type='symbol' multiple='true'/>
      <field name='capabilities' type='symbol' multiple='true'/>
    </type>
*/
struct amqp_addressing_source_t {
    // 11 fields
    amqp_wildcard_t address; 
    amqp_terminus_durability_t durable; /* default="none"; */
    amqp_terminus_expiry_policy_t expiry_policy; /* default="session-end"; */
    amqp_seconds_t timeout; /* default="0"; */
    int dynamic; /* default="false"; */
    amqp_fields_t dynamic_node_properties; 
    amqp_symbol_t distribution_mode; 
    amqp_filter_set_t filter; 
    amqp_wildcard_t default_outcome; 
    amqp_multiple_symbol_t outcomes; 
    amqp_multiple_symbol_t capabilities; 
};
    
/*
    <type name='target' provides='target' class='composite' source='list'>
      <descriptor name='amqp:target:list' code='0x00000000:0x00000029'/>
      <field name='address' requires='address' type='*'/>
      <field name='durable' default='none' type='terminus-durability'/>
      <field name='expiry-policy' default='session-end' type='terminus-expiry-policy'/>
      <field name='timeout' default='0' type='seconds'/>
      <field name='dynamic' default='false' type='boolean'/>
      <field name='dynamic-node-properties' type='node-properties'/>
      <field name='capabilities' type='symbol' multiple='true'/>
    </type>
*/
struct amqp_addressing_target_t {
    // 7 fields
    amqp_wildcard_t address; 
    amqp_terminus_durability_t durable; /* default="none"; */
    amqp_terminus_expiry_policy_t expiry_policy; /* default="session-end"; */
    amqp_seconds_t timeout; /* default="0"; */
    int dynamic; /* default="false"; */
    amqp_fields_t dynamic_node_properties; 
    amqp_multiple_symbol_t capabilities; 
};
    
/*
    <type name='delete-on-close' provides='lifetime-policy' class='composite' source='list'>
      <descriptor name='amqp:delete-on-close:list' code='0x00000000:0x0000002b'/>
    </type>
*/
struct amqp_addressing_delete_on_close_t {
    // described amqp:delete-on-close:list
    amqp_list_t delete_on_close; 
};
    
/*
    <type name='delete-on-no-links' provides='lifetime-policy' class='composite' source='list'>
      <descriptor name='amqp:delete-on-no-links:list' code='0x00000000:0x0000002c'/>
    </type>
*/
struct amqp_addressing_delete_on_no_links_t {
    // described amqp:delete-on-no-links:list
    amqp_list_t delete_on_no_links; 
};
    
/*
    <type name='delete-on-no-messages' provides='lifetime-policy' class='composite' source='list'>
      <descriptor name='amqp:delete-on-no-messages:list' code='0x00000000:0x0000002d'/>
    </type>
*/
struct amqp_addressing_delete_on_no_messages_t {
    // described amqp:delete-on-no-messages:list
    amqp_list_t delete_on_no_messages; 
};
    
/*
    <type name='delete-on-no-links-or-messages' provides='lifetime-policy' class='composite' source='list'>
      <descriptor name='amqp:delete-on-no-links-or-messages:list' code='0x00000000:0x0000002e'/>
    </type>
*/
struct amqp_addressing_delete_on_no_links_or_messages_t {
    // described amqp:delete-on-no-links-or-messages:list
    amqp_list_t delete_on_no_links_or_messages; 
};
typedef struct amqp_delivery_state_received_t amqp_delivery_state_received_t;
typedef struct amqp_delivery_state_accepted_t amqp_delivery_state_accepted_t;
typedef struct amqp_delivery_state_rejected_t amqp_delivery_state_rejected_t;
typedef struct amqp_delivery_state_released_t amqp_delivery_state_released_t;
typedef struct amqp_delivery_state_modified_t amqp_delivery_state_modified_t;
    
/*
    <type name='received' provides='delivery-state' class='composite' source='list'>
      <descriptor name='amqp:received:list' code='0x00000000:0x00000023'/>
      <field name='section-number' mandatory='true' type='uint'/>
      <field name='section-offset' mandatory='true' type='ulong'/>
    </type>
*/
struct amqp_delivery_state_received_t {
    // 2 fields
    uint32_t section_number; /* mandatory; */
    uint64_t section_offset; /* mandatory; */
};
    
/*
    <type name='accepted' provides='delivery-state, outcome' class='composite' source='list'>
      <descriptor name='amqp:accepted:list' code='0x00000000:0x00000024'/>
    </type>
*/
struct amqp_delivery_state_accepted_t {
    // described amqp:accepted:list
    amqp_list_t accepted; 
};
    
/*
    <type name='rejected' provides='delivery-state, outcome' class='composite' source='list'>
      <descriptor name='amqp:rejected:list' code='0x00000000:0x00000025'/>
      <field name='error' type='error'/>
    </type>
*/
struct amqp_delivery_state_rejected_t {
    // 1 fields
    amqp_error_t error; 
};
    
/*
    <type name='released' provides='delivery-state, outcome' class='composite' source='list'>
      <descriptor name='amqp:released:list' code='0x00000000:0x00000026'/>
    </type>
*/
struct amqp_delivery_state_released_t {
    // described amqp:released:list
    amqp_list_t released; 
};
    
/*
    <type name='modified' provides='delivery-state, outcome' class='composite' source='list'>
      <descriptor name='amqp:modified:list' code='0x00000000:0x00000027'/>
      <field name='delivery-failed' type='boolean'/>
      <field name='undeliverable-here' type='boolean'/>
      <field name='message-annotations' type='fields'/>
    </type>
*/
struct amqp_delivery_state_modified_t {
    // 3 fields
    int delivery_failed; 
    int undeliverable_here; 
    amqp_fields_t message_annotations; 
};
typedef struct amqp_messaging_header_t amqp_messaging_header_t;
typedef struct amqp_messaging_delivery_annotations_t amqp_messaging_delivery_annotations_t;
typedef struct amqp_messaging_message_annotations_t amqp_messaging_message_annotations_t;
typedef struct amqp_messaging_properties_t amqp_messaging_properties_t;
typedef struct amqp_messaging_application_properties_t amqp_messaging_application_properties_t;
typedef struct amqp_messaging_data_t amqp_messaging_data_t;
typedef struct amqp_messaging_amqp_sequence_t amqp_messaging_amqp_sequence_t;
typedef struct amqp_messaging_amqp_value_t amqp_messaging_amqp_value_t;
typedef struct amqp_messaging_footer_t amqp_messaging_footer_t;
    
/*
    <type name='header' provides='section' class='composite' source='list'>
      <descriptor name='amqp:header:list' code='0x00000000:0x00000070'/>
      <field name='durable' type='boolean'/>
      <field name='priority' type='ubyte'/>
      <field name='ttl' type='milliseconds'/>
      <field name='first-acquirer' type='boolean'/>
      <field name='delivery-count' type='uint'/>
    </type>
*/
struct amqp_messaging_header_t {
    // 5 fields
    int durable; 
    uint8_t priority; 
    amqp_milliseconds_t ttl; 
    int first_acquirer; 
    uint32_t delivery_count; 
};
    
/*
    <type name='delivery-annotations' provides='section' class='restricted' source='annotations'>
      <descriptor name='amqp:delivery-annotations:map' code='0x00000000:0x00000071'/>
    </type>
*/
struct amqp_messaging_delivery_annotations_t {
    // described amqp:delivery-annotations:map
    amqp_map_t delivery_annotations; 
};
    
/*
    <type name='message-annotations' provides='section' class='restricted' source='annotations'>
      <descriptor name='amqp:message-annotations:map' code='0x00000000:0x00000072'/>
    </type>
*/
struct amqp_messaging_message_annotations_t {
    // described amqp:message-annotations:map
    amqp_map_t message_annotations; 
};
    
/*
    <type name='properties' provides='section' class='composite' source='list'>
      <descriptor name='amqp:properties:list' code='0x00000000:0x00000073'/>
      <field name='message-id' requires='message-id' type='*'/>
      <field name='user-id' type='binary'/>
      <field name='to' requires='address' type='*'/>
      <field name='subject' type='string'/>
      <field name='reply-to' requires='address' type='*'/>
      <field name='correlation-id' requires='message-id' type='*'/>
      <field name='content-type' type='symbol'/>
      <field name='content-encoding' type='symbol'/>
      <field name='absolute-expiry-time' type='timestamp'/>
      <field name='creation-time' type='timestamp'/>
      <field name='group-id' type='string'/>
      <field name='group-sequence' type='sequence-no'/>
      <field name='reply-to-group-id' type='string'/>
    </type>
*/
struct amqp_messaging_properties_t {
    // 13 fields
    amqp_wildcard_t message_id; 
    amqp_binary_t user_id; 
    amqp_wildcard_t to; 
    amqp_string_t subject; 
    amqp_wildcard_t reply_to; 
    amqp_wildcard_t correlation_id; 
    amqp_symbol_t content_type; 
    amqp_symbol_t content_encoding; 
    amqp_timestamp_t absolute_expiry_time; 
    amqp_timestamp_t creation_time; 
    amqp_string_t group_id; 
    amqp_sequence_no_t group_sequence; 
    amqp_string_t reply_to_group_id; 
};
    
/*
    <type name='application-properties' provides='section' class='restricted' source='map'>
      <descriptor name='amqp:application-properties:map' code='0x00000000:0x00000074'/>
    </type>
*/
struct amqp_messaging_application_properties_t {
    // described amqp:application-properties:map
    amqp_map_t application_properties; 
};
    
/*
    <type name='data' provides='section' class='restricted' source='binary'>
      <descriptor name='amqp:data:binary' code='0x00000000:0x00000075'/>
    </type>
*/
struct amqp_messaging_data_t {
    // described amqp:data:binary
    amqp_binary_t data; 
};
    
/*
    <type name='amqp-sequence' provides='section' class='restricted' source='list'>
      <descriptor name='amqp:amqp-sequence:list' code='0x00000000:0x00000076'/>
    </type>
*/
struct amqp_messaging_amqp_sequence_t {
    // described amqp:amqp-sequence:list
    amqp_list_t amqp_sequence; 
};
    
/*
    <type name='amqp-value' provides='section' class='restricted' source='*'>
      <descriptor name='amqp:amqp-value:*' code='0x00000000:0x00000077'/>
    </type>
*/
struct amqp_messaging_amqp_value_t {
    // described amqp:amqp-value:*
    amqp_wildcard_t amqp_value; 
};
    
/*
    <type name='footer' provides='section' class='restricted' source='annotations'>
      <descriptor name='amqp:footer:map' code='0x00000000:0x00000078'/>
    </type>
*/
struct amqp_messaging_footer_t {
    // described amqp:footer:map
    amqp_map_t footer; 
};
#ifdef __cplusplus
}
#endif
#endif
