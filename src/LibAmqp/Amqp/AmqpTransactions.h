/*
   Copyright 2011-2012 StormMQ Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
 
/*
  WARNING: This file was generated by scripts/generate. DO NOT HAND EDIT.
     scripts/generate uses:
  	scripts/generate-amqp-types.rb to generate AMQP typedefs
  	scripts/generate-frame-decode-methods.rb to generate frame decode methods
  	scripts/generate-type-decode-methods.rb to generate messaging type decode methods
 */
#ifndef LIBAMQP_AMQP_AMQP_TRANSACTIONS_H
#define LIBAMQP_AMQP_AMQP_TRANSACTIONS_H
#ifdef __cplusplus
extern "C" {
#endif

#include "AmqpTypes/AmqpTypes.h"
    
typedef struct amqp_txn_coordinator_t amqp_txn_coordinator_t;
typedef struct amqp_txn_declare_t amqp_txn_declare_t;
typedef struct amqp_txn_discharge_t amqp_txn_discharge_t;
typedef struct amqp_txn_declared_t amqp_txn_declared_t;
typedef struct amqp_txn_transactional_state_t amqp_txn_transactional_state_t;
    
/*
    <type name='coordinator' provides='target' class='composite' source='list'>
      <descriptor name='amqp:coordinator:list' code='0x00000000:0x00000030'/>
      <field name='capabilities' requires='txn-capability' type='symbol' multiple='true'/>
    </type>
*/
struct amqp_txn_coordinator_t {
    // 1 fields
    amqp_multiple_symbol_t capabilities; 
};
    
/*
    <type name='declare' class='composite' source='list'>
      <descriptor name='amqp:declare:list' code='0x00000000:0x00000031'/>
      <field name='global-id' requires='global-tx-id' type='*'/>
    </type>
*/
struct amqp_txn_declare_t {
    // 1 fields
    amqp_wildcard_t global_id; 
};
    
/*
    <type name='discharge' class='composite' source='list'>
      <descriptor name='amqp:discharge:list' code='0x00000000:0x00000032'/>
      <field name='txn-id' mandatory='true' requires='txn-id' type='*'/>
      <field name='fail' type='boolean'/>
    </type>
*/
struct amqp_txn_discharge_t {
    // 2 fields
    amqp_wildcard_t txn_id; /* mandatory; */
    int fail_is_null;
    int fail; 
};
    
/*
    <type name='declared' provides='delivery-state, outcome' class='composite' source='list'>
      <descriptor name='amqp:declared:list' code='0x00000000:0x00000033'/>
      <field name='txn-id' mandatory='true' requires='txn-id' type='*'/>
    </type>
*/
struct amqp_txn_declared_t {
    // 1 fields
    amqp_wildcard_t txn_id; /* mandatory; */
};
    
/*
    <type name='transactional-state' provides='delivery-state' class='composite' source='list'>
      <descriptor name='amqp:transactional-state:list' code='0x00000000:0x00000034'/>
      <field name='txn-id' mandatory='true' requires='txn-id' type='*'/>
      <field name='outcome' requires='outcome' type='*'/>
    </type>
*/
struct amqp_txn_transactional_state_t {
    // 2 fields
    amqp_wildcard_t txn_id; /* mandatory; */
    amqp_wildcard_t outcome; 
};
#ifdef __cplusplus
}
#endif
#endif
