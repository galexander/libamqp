#!/usr/bin/ruby
#
require 'rexml/document'

$header=<<eos
/*
   Copyright 2011 StormMQ Limited

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
 
/*
  WARNING: This file was generated by scripts/generate. DO NOT HAND EDIT.
     scripts/generate uses:
  	scripts/generate-amqp-types.rb to generate AMQP typedefs
  	scripts/generate-decode-methods.rb to generate composite type decode methods
 */
eos

module AttributeTests
  def field_mapping(f)
    t = f.attributes['type']
    $mappings[t]
  end  
  def has_mapping?(f)
    field_mapping f
  end
  def multiple?(f)
    f.attributes['multiple'] == 'true'
  end
  def mandatory?(f)
    f.attributes['mandatory'] == 'true'
  end
    
  def primitive?(f)
    m = field_mapping(f)
    m && m.primitive?
  end
end

module Common
  include AttributeTests
end

module Outputters
  include AttributeTests
  def mandatory(o)
    "mandatory;" if o[:mandatory]
  end  
  def default(o)
    "default=\"#{o[:default]}\";" if o[:default]
  end
  def comment(o)
    c = "#{mandatory(o)} #{default(o)}".strip
    "/* #{c} */" if c.length > 0
  end
  def xml_name
    @name
  end
  def base_xml_name
    @base_name || @name
  end
  def c_name
    @name
  end
end

class SimpleMapper
  include Outputters
  def initialize(n, t)
    @name = n
    @tag = t
  end
  def output(n, t, o = {})
      puts "    #{@tag} #{n}; #{comment(o)}"
  end  
  def primitive?
    TRUE
  end
end

class TypedefedMapper
  include Outputters
  def initialize(t, base = nil, primitive = FALSE)
    @name = t
    @tag = t
    @base_name = base
    @primitive = primitive
  end
  def output(n, t, o = {})
    puts "    amqp_#{@tag}_t #{n}; #{comment(o)}" unless o[:multiple]
    puts "    amqp_multiple_#{@tag}_t #{n}; #{comment(o)}" if o[:multiple]
  end
  def primitive?
    @primitive
  end
end

class EnumMapper < TypedefedMapper
  def initialize(t)
    super(t, nil, TRUE)
  end
end

$mappings = {}
$mappings['boolean'] = SimpleMapper.new('boolean', 'int')
$mappings['ubyte'] = SimpleMapper.new('ubyte', 'uint8_t')
$mappings['byte'] = SimpleMapper.new('byte', 'int8_t')
$mappings['ushort'] = SimpleMapper.new('ushort', 'uint16_t')
$mappings['short'] = SimpleMapper.new('short', 'int16_t')
$mappings['uint'] = SimpleMapper.new('uint', 'uint32_t')
$mappings['int'] = SimpleMapper.new('int', 'int32_t')
$mappings['ulong'] = SimpleMapper.new('ulong', 'uint64_t')
$mappings['long'] = SimpleMapper.new('long', 'int64_t')

$mappings['handle'] = SimpleMapper.new('uint', 'uint32_t')

$mappings['binary'] = TypedefedMapper.new('binary')
$mappings['string'] = TypedefedMapper.new('string')
$mappings['symbol'] = TypedefedMapper.new('symbol')
$mappings['array'] = TypedefedMapper.new('array')
$mappings['list'] = TypedefedMapper.new('list')
$mappings['map'] = TypedefedMapper.new('map')

$mappings['milliseconds'] = TypedefedMapper.new('milliseconds', 'uint', TRUE)
$mappings['seconds'] = TypedefedMapper.new('seconds', 'uint', TRUE)
$mappings['sequence-no'] = TypedefedMapper.new('sequence_no', 'uint', TRUE)
$mappings['transfer-number'] = TypedefedMapper.new('transfer_number', 'uint', TRUE)
$mappings['delivery-number'] = TypedefedMapper.new('delivery_number', 'uint', TRUE)
$mappings['message-format'] = TypedefedMapper.new('message_format', 'uint', TRUE)

$mappings['role'] = TypedefedMapper.new('role', 'boolean', TRUE)

$mappings['ietf-language-tag'] = TypedefedMapper.new('ietf_language_tag', 'symbol')
$mappings['fields'] = TypedefedMapper.new('fields', 'map')
$mappings['node-properties'] = TypedefedMapper.new('fields', 'map')
$mappings['delivery-tag'] = TypedefedMapper.new('delivery_tag', 'binary')

$mappings['error'] = TypedefedMapper.new('error', 'amqp_error')
$mappings['timestamp'] = TypedefedMapper.new('timestamp')

$mappings['terminus-durability'] = TypedefedMapper.new('terminus_durability')
$mappings['terminus-expiry-policy'] = TypedefedMapper.new('terminus_expiry_policy')
$mappings['filter-set'] = TypedefedMapper.new('filter_set')

$mappings['*'] = TypedefedMapper.new('wildcard')

$mappings['sasl-code'] = EnumMapper.new('sasl_code')
$mappings['sender-settle-mode'] = EnumMapper.new('sender_settle_mode')
$mappings['receiver-settle-mode'] = EnumMapper.new('receiver_settle_mode')

